# -*- coding: utf-8 -*-
"""2-Step-Prompting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K8fTD6-AU1I2yvklDtMDsfZZuzkFw49f

# API setup
"""

!pip install openai

import openai
import random
import json
import pandas as pd
import ast

df=pd.read_csv('data.csv')

a=list(df['query'])

from openai import OpenAI
api_key_gpt4 = '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'
client_gpt4 = OpenAI(api_key=api_key_gpt4)

def get_completion_gpt4(prompt,temperature=0,client=client_gpt4):
    messages = [{"role": "user", "content": prompt}]
    response = client.chat.completions.create(
        model='gpt-4',
        messages=messages,
        temperature=temperature,
    )
    return response.choices[0].message.content

def prompting1(query):
  prompt = f'''# Instructions
  You will recieve a query that will be passed in a Large Language Model. /
  To be able to handle the query appropriately , you have to generate a prompt with ordering of tools based on chain of thoughts/
  The puporse of the prompt you generate is so that the Large Language model can properly handle solving the query/
  So you have to understand the Query and output a prompt based on chain of thoughts which can be passed in the large lanaguage model

  ##Query
  {query}

  ##Tools available
  works_list-Returns a list of work items matching the request
  summarize_objects-Summarizes a list of objects. The logic of summarizing a particular object type is an internal implementation detail.
  prioritize_objects-Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.
  add_work_items_to_sprint-Adds the given work items to the sprint
  get_sprint_id-Returns the ID of the current sprint
  get_similar_work_items-Returns a list of work items that are similar to the given work item
  search_object_by_name-Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.
  create_actionable_tasks_from_text-Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.
  who_am_i-Returns the ID of the current user
  '''
  return prompt

def prompting2(query,order):
  r="""
    ##tool1

  {
      "tool_name": "works_list",
      "tool_description": "Returns a list of work items matching the request",
      "arguments": [
          {"name": "applies_to_part", "description": "Filters for work belonging to any of the provided parts", "type": "array of strings"},
          {"name": "created_by", "description": "Filters for work created by any of these users", "type": "array of strings"},
          {"name": "issue.priority", "description": "Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3", "type": "array of strings"},
          {"name": "issue.rev_orgs", "description": "Filters for issues with any of the provided Rev organizations", "type": "array of strings"},
          {"name": "limit", "description": "The maximum number of works to return. The default is '50'", "type": "integer(int32)"},
          {"name": "owned_by", "description": "Filters for work owned by any of these users", "type": "array of strings"},
          {"name": "stage.name", "description": "Filters for records in the provided stage(s) by name", "type": "array of strings"},
          {"name": "ticket.needs_response", "description": "Filters for tickets that need a response", "type": "boolean"},
          {"name": "ticket.rev_org", "description": "Filters for tickets associated with any of the provided Rev organizations", "type": "array of strings"},
          {"name": "ticket.severity", "description": "Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium", "type": "array of strings"},
          {"name": "ticket.source_channel", "description": "Filters for tickets with any of the provided source channels", "type": "array of strings"},
          {"name": "type", "description": "Filters for work of the provided types. Allowed values are issue, ticket, task.", "type": "array of strings"}
      ]
  }

  ##tool2
  {
          "tool_name": "summarize_objects",
          "tool_description": "Summarizes a list of objects. The logic of summarizing a particular object type is an internal implementation detail.",
          "arguments": [
              {"name": "objects", "description": "List of objects to summarize", "type": "array of objects"}
          ]
      }

  ##tool3
  {
          "tool_name": "prioritize_objects",
          "tool_description": "Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.",
          "arguments": [
              {"name": "objects", "description": "List of objects to prioritize", "type": "array of objects"}
          ]
      }

  ##tool4
  {
          "tool_name": "add_work_items_to_sprint",
          "tool_description": "Adds the given work items to the sprint",
          "arguments": [
              {"name": "work_ids", "description": "A list of work item IDs to be added to the sprint", "type": "array of strings"},
              {"name": "sprint_id", "description": "The ID of the sprint to which the work items should be added", "type": "str"}
          ]
      }

  ##tool5
  {
          "tool_name": "get_sprint_id",
          "tool_description": "Returns the ID of the current sprint",
          "arguments": []
      }

  ##tool6
  {
          "tool_name": "get_similar_work_items",
          "tool_description": "Returns a list of work items that are similar to the given work item",
          "arguments": [
              {"name": "work_id", "description": "The ID of the work item for which you want to find similar items", "type": "string"}
          ]
      }

  ##tool7
  {
          "tool_name": "search_object_by_name",
          "tool_description": "Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.",
          "arguments": [
              {"name": "query", "description": "The search string, could be for example customer’s name, part name, user name.", "type": "string"}
          ]
      }

  ##tool8
  {
          "tool_name": "create_actionable_tasks_from_text",
          "tool_description": "Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.",
          "arguments": [
              {"name": "text", "description": "The text from which the actionable insights need to be created.", "type": "string"}
          ]
      }

  ##tool9
  {
          "tool_name": "who_am_i",
          "tool_description": "Returns the ID of the current user",
          "arguments": []
      }
"""
  p2=f"""
  use the following order of tools
  {order}
  ##query
  {query}
  ## Tool List
  {r}
  The response should be in JSON schema. To reference the value of the ith tool in the chain, use $$PREV[i] as argument value. i = 0, 1, .. j-1; j = current tool’s index in the array. If the query could not be answered with the given set of tools, output an empty list instead.
  """
  return p2

outputs=[]
for i in range(len(a)):
  t=prompting1(a[i])
  m=get_completion_gpt4(t)
  x=prompting2(a[i],m)
  out=get_completion_gpt4(x)
  outputs.append(out)