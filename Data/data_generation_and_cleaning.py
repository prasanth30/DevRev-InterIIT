# -*- coding: utf-8 -*-
"""data_generation_and_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ph8ZDwN9r7RssfSMtqHbmAcSUt27fT2T
"""

!pip install openai

import openai
import random
import json
import ast
import math
import time
import pandas as pd

# @title samyak tools
samyak_tools_list = ["""{
        "tool_name": "generate_code_reviews",
        "tool_description": "Generates a list of code reviews based on the changes made in the repository.",
        "arguments": [
            {"name": "repository", "description": "The name of the repository for which code reviews are generated", "type": "string"},
            {"name": "since_date", "description": "Filters code reviews based on changes made since this date", "type": "date"},
            {"name": "reviewers", "description": "List of developers assigned to review the code", "type": "array of strings"}
        ]
    }""",
  """{
        "tool_name": "analyze_customer_feedback",
        "tool_description": "Analyzes customer feedback to identify common themes and areas for improvement",
        "arguments": [
            {"name": "feedback_data", "description": "List of customer feedback entries to be analyzed", "type": "array of objects"},
            {"name": "sentiment_threshold", "description": "Threshold for considering feedback as positive or negative", "type": "float"},
            {"name": "topic_modeling", "description": "Apply topic modeling to identify key topics in the feedback", "type": "boolean"}
        ]
    }""",
  """{
        "tool_name": "calculate_code_quality_metrics",
        "tool_description": "Calculates various code quality metrics for a given codebase",
        "arguments": [
            {"name": "codebase_path", "description": "The path to the codebase for which metrics are calculated", "type": "string"},
            {"name": "metrics_to_calculate", "description": "List of specific code quality metrics to be calculated", "type": "array of strings"},
            {"name": "thresholds", "description": "Thresholds for determining code health", "type": "object"}
        ]
    }""",
  """{
        "tool_name": "schedule_team_meeting",
        "tool_description": "Schedules a team meeting with relevant members based on availability and priorities",
        "arguments": [
            {"name": "meeting_purpose", "description": "The purpose or agenda of the team meeting", "type": "string"},
            {"name": "team_members", "description": "List of team members who should attend the meeting", "type": "array of strings"},
            {"name": "preferred_time", "description": "Preferred time for the meeting", "type": "time"}
        ]
    }""",
  """{
        "tool_name": "notify_deployments",
        "tool_description": "Notifies relevant stakeholders about upcoming or completed deployments",
        "arguments": [
            {"name": "deployment_info", "description": "Information about the deployment, including version and release notes", "type": "object"},
            {"name": "notification_list", "description": "List of stakeholders to be notified", "type": "array of strings"},
            {"name": "notify_on_completion", "description": "Flag to determine whether to notify on completion", "type": "boolean"}
        ]
    }""",
  """{
        "tool_name": "resolve_dependencies",
        "tool_description": "Resolves and updates dependencies in the project based on the latest available versions",
        "arguments": [
            {"name": "project_path", "description": "The path to the project for which dependencies should be resolved", "type": "string"},
            {"name": "dependency_file", "description": "The file specifying project dependencies", "type": "string"},
            {"name": "update_strategy", "description": "Strategy for updating dependencies (e.g., strict, latest)", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "optimize_database_queries",
        "tool_description": "Analyzes and optimizes database queries for better performance",
        "arguments": [
            {"name": "database_name", "description": "The name of the database to be optimized", "type": "string"},
            {"name": "query_analysis_level", "description": "Level of analysis to be performed on queries (e.g., basic, advanced)", "type": "string"},
            {"name": "optimize_strategy", "description": "Strategy for optimizing queries (e.g., index optimization)", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "security_audit_manager",
        "tool_description": "Manages and conducts security audits on the codebase",
        "arguments": [
            {"name": "audit_level", "description": "Level of the security audit (e.g., basic, comprehensive)", "type": "string"},
            {"name": "report_format", "description": "Format for the audit report (e.g., PDF, HTML)", "type": "string"},
            {"name": "notify_stakeholders", "description": "Flag to notify stakeholders on audit completion", "type": "boolean"}
        ]
    }""",
  """{
        "tool_name": "backup_and_restore_manager",
        "tool_description": "Manages backup and restore processes for critical data",
        "arguments": [
            {"name": "data_to_backup", "description": "List of critical data to be included in the backup", "type": "array of objects"},
            {"name": "backup_schedule", "description": "Schedule for automated backup execution", "type": "cron expression"}
        ]
    }""",
  """{
        "tool_name": "get_work_item_details",
        "tool_description": "Returns the details of a specific work item",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item for which you want to retrieve details", "type": "string"},
            {"name": "fields", "description": "The fields to be included in the details", "type": "an array of strings"},
            {"name": "description", "description": "Expands the details of the work item", "type": "boolean"},
            {"name": "revision", "description": "The revision number of the work item", "type": "integer(int32)"}
        ]
    }""",
  """{
        "tool_name": "generate_work_report",
        "tool_description": "Generates a report of work items based on specified criteria",
        "arguments": [
            {"name": "start_date", "description": "The start date for the report", "type": "string"},
            {"name": "end_date", "description": "The end date for the report", "type": "string"},
            {"name": "user_id", "description": "The ID of the user for whom the report is generated", "type": "string"},
            {"name": "work_type", "description": "The type of work items to include in the report", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "assign_work_item",
        "tool_description": "Assigns a work item to a specific user",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item to be assigned", "type": "string"},
            {"name": "assignee_id", "description": "The ID of the user to whom the work item is assigned", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "create_new_sprint",
        "tool_description": "Creates a new sprint for managing work items",
        "arguments": [
            {"name": "sprint_name", "description": "The name of the new sprint", "type": "string"},
            {"name": "start_date", "description": "The start date of the new sprint", "type": "string"},
            {"name": "end_date", "description": "The end date of the new sprint", "type": "string"},
            {"name": "capacity", "description": "The capacity of the new sprint", "type": "integer(int32)"}
        ]
    }""",
  """{
        "tool_name": "get_work_item_comments",
        "tool_description": "Retrieves the comments associated with a specific work item",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item for which you want to retrieve comments", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "get_ticket_comments",
        "tool_description": "Returns the comments of a specific ticket",
        "arguments": [
            {"name": "ticket_id", "description": "The ID of the ticket for which you want to retrieve comments", "type": "string"},
            {"name": "from_date", "description": "The start date for the comments retrieval", "type": "string"},
            {"name": "to_date", "description": "The end date for the comments retrieval", "type": "string"},
            {"name": "limit", "description": "The maximum number of comments to return", "type": "integer(int32)"}
        ]
    }""",
  """{
        "tool_name": "create_new_work_item",
        "tool_description": "Creates a new work item with the specified details",
        "arguments": [
            {"name": "title", "description": "The title of the new work item", "type": "string"},
            {"name": "description", "description": "The description of the new work item", "type": "string"},
            {"name": "type", "description": "The type of the new work item", "type": "string"},
            {"name": "priority", "description": "TThe priority of the new work item", "type": "string"},
            {"name": "assignee_id", "description": "The ID of the user to whom the work item is assigned", "type": "string"},
        ]
    }""",
  """{
        "tool_name": "get_work_item_history",
        "tool_description": "Retrieves the history of changes made to a specific work item",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item for which you want to retrieve history", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "create_new_ticket",
        "tool_description": "Creates a new ticket for tracking issues or requests",
        "arguments": [
            {"name": "title", "description": "The title of the ticket", "type": "string"},
            {"name": "description", "description": "The description of the new ticket", "type": "string"},
            {"name": "priority", "description": "TThe priority of the new work item", "type": "string"},
            {"name": "assignee_id", "description": "The ID of the user to whom the t is assigned", "type": "string"},
        ]
    }""",
  """{
        "tool_name": "get_ticket_details",
        "tool_description": "Returns the details of a specific ticket",
        "arguments": [
            {"name": "ticket_id", "description": "The ID of the ticket for which you want to retrieve details", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "generate_release_notes",
        "tool_description": "Generates release notes for a given product version",
        "arguments": [
            {"name": "product_version", "description": "The version of the product for which to generate release notes", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "estimate_effort_for_work_item",
        "tool_description": "Estimates the effort required to complete a given work item",
        "arguments": [
            {"name": "work_item_id", "description": "The ID of the work item for which to estimate effort", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "bug_triage_helper",
        "tool_description": "Automatically triages reported bugs based on severity and impact.",
        "arguments": [
            {"name": "bug_reports", "description": "Array of bug report descriptions", "type": "array of strings"},
            {"name": "priority_levels", "description": "List of priority levels to classify", "type": "array of strings"}
        ]
    }""",
  """{
        "tool_name": "release_timeline_planner",
        "tool_description": "Helps in planning and visualizing product release timelines.",
        "arguments": [
            {"name": "release_items", "description": "List of items scheduled for release", "type": "array of strings"},
            {"name": "start_date", "description": "Start date of the release cycle", "type": "date"},
            {"name": "end_date", "description": "End date of the release cycle", "type": "date"}
        ]
    }""",
  """{
        "tool_name": "sales_forecast_predictor",
        "tool_description": "Predicts sales forecasts based on historical data and current trends.",
        "arguments": [
            {"name": "historical_sales_data", "description": "Historical sales data", "type": "array of objects"},
            {"name": "forecast_period", "description": "Time period for the sales forecast", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "deployment_automation_manager",
        "tool_description": "Automates and manages the software deployment process.",
        "arguments": [
            {"name": "deployment_scripts", "description": "Scripts for automating deployment", "type": "array of strings"},
            {"name": "environment", "description": "Deployment environment", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "customer_journey_mapper",
        "tool_description": "Maps customer journeys to understand and improve customer experience.",
        "arguments": [
            {"name": "customer_data", "description": "Data about customers and their interactions", "type": "array of objects"},
            {"name": "journey_stages", "description": "Stages in the customer journey to map", "type": "array of strings"}
        ]
    }""",
  """{
        "tool_name": "risk_assessment_analyzer",
        "tool_description": "Assesses and categorizes risks associated with different projects.",
        "arguments": [
            {"name": "project_risks", "description": "Data about potential risks in projects", "type": "array of objects"},
            {"name": "risk_tolerance", "description": "Level of risk tolerance", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "market_trend_analyzer",
        "tool_description": "Analyzes market trends to inform strategic decisions.",
        "arguments": [
            {"name": "market_data", "description": "Data about current market trends", "type": "array of objects"},
            {"name": "industry_focus", "description": "Specific industry to focus the analysis on", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "update_work_item_status",
        "tool_description": "Updates the status of a specific work item",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item to be updated", "type": "string"},
            {"name": "status", "description": "The new status of the work item", "type": "string"}
        ]
    }""",
  """{
        "tool_name": "get_user_permissions",
        "tool_description": "Returns the permissions of a specific user",
        "arguments": [
            {"name": "user_id", "description": "The ID of the user for which you want to retrieve permissions", "type": "string"},
            {"name": "scope", "description": "The scope for which the permissions are to be retrieved", "type": "string"},
            {"name": "role", "description": "The role for which the permissions are to be retrieved", "type": "string"},
            {"name": "resource", "description": "The resource for which the permissions are to be retrieved", "type": "string"}
        ]
    }"""]

# @title tools
tools_list = ["""
    {
        "tool_name": "works_list",
        "tool_description": "Returns a list of work items matching the request",
        "arguments": [
            {"name": "applies_to_part", "description": "Filters for work belonging to any of the provided parts", "type": "array of strings"},
            {"name": "created_by", "description": "Filters for work created by any of these users", "type": "array of strings"},
            {"name": "issue.priority", "description": "Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3", "type": "array of strings"},
            {"name": "issue.rev_orgs", "description": "Filters for issues with any of the provided Rev organizations", "type": "array of strings"},
            {"name": "limit", "description": "The maximum number of works to return. The default is '50'", "type": "integer(int32)"},
            {"name": "owned_by", "description": "Filters for work owned by any of these users", "type": "array of strings"},
            {"name": "stage.name", "description": "Filters for records in the provided stage(s) by name", "type": "array of strings"},
            {"name": "ticket.needs_response", "description": "Filters for tickets that need a response", "type": "boolean"},
            {"name": "ticket.rev_org", "description": "Filters for tickets associated with any of the provided Rev organizations", "type": "array of strings"},
            {"name": "ticket.severity", "description": "Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium", "type": "array of strings"},
            {"name": "ticket.source_channel", "description": "Filters for tickets with any of the provided source channels", "type": "array of strings"},
            {"name": "type", "description": "Filters for work of the provided types. Allowed values are issue, ticket, task.", "type": "array of strings"}
        ]
    }""",
   """{
        "tool_name": "summarize_objects",
        "tool_description": "Summarizes a list of objects. The logic of summarizing a particular object type is an internal implementation detail.",
        "arguments": [
            {"name": "objects", "description": "List of objects to summarize", "type": "array of objects"}
        ]
    }""",
  """{
        "tool_name": "prioritize_objects",
        "tool_description": "Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.",
        "arguments": [
            {"name": "objects", "description": "List of objects to prioritize", "type": "array of objects"}
        ]
    }""",
  """{
        "tool_name": "add_work_items_to_sprint",
        "tool_description": "Adds the given work items to the sprint",
        "arguments": [
            {"name": "work_ids", "description": "A list of work item IDs to be added to the sprint", "type": "array of strings"},
            {"name": "sprint_id", "description": "The ID of the sprint to which the work items should be added", "type": "str"}
        ]
    }""",
    """{
        "tool_name": "get_sprint_id",
        "tool_description": "Returns the ID of the current sprint",
        "arguments": []
    }""",
    """{
        "tool_name": "get_similar_work_items",
        "tool_description": "Returns a list of work items that are similar to the given work item",
        "arguments": [
            {"name": "work_id", "description": "The ID of the work item for which you want to find similar items", "type": "string"}
        ]
    }""",
    """{
        "tool_name": "search_object_by_name",
        "tool_description": "Given a search string, returns the ID of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.",
        "arguments": [
            {"name": "query", "description": "The search string, could be for example customer’s name, part name, user name.", "type": "string"}
        ]
    }""",
    """{
        "tool_name": "create_actionable_tasks_from_text",
        "tool_description": "Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.",
        "arguments": [
            {"name": "text", "description": "The text from which the actionable insights need to be created.", "type": "string"}
        ]
    }""",
    """{
        "tool_name": "who_am_i",
        "tool_description": "Returns the ID of the current user",
        "arguments": []
    }"""
]

api_key  = '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'
from openai import OpenAI
client_gpt3 = OpenAI(api_key=api_key)

def get_completion(prompt, model="gpt-3.5-turbo-instruct", temperature = 0.3,client=client_gpt3):
    messages = [{"role": "user", "content": prompt}]
    response = client.completions.create(
        model=model,
        #messages=messages,
        prompt=prompt,
        temperature=temperature,
        max_tokens=1000,

    )
    return response.choices[0].text

def get_prompt(tools_list,index_list):
  flaw="""        {
        "query": "Prioritize work items created by user1",
        "output": [
            {"tool_name": "prioritize_objects", "arguments": [{"argument_name": "objects", "argument_value": "$$PREV[0]"}]},
            {"tool_name": "works_list", "arguments": [
                {"argument_name": "created_by", "argument_value": ["user1"]}
            ]}
        ]
    }"""
  tools = ''
  j = 1
  for i in index_list:
    tools += '\n'
    tools += f'### Tool {j}'
    tools += '\n'
    tools += "'''json"
    tools += '\n'
    tools += str(tools_list[i])
    tools += '\n'
    j+=1
  tools += ''
  prompt = f"""
  Generate a (query, output) pair. The query represents a task for which you must use the provided tools.
  # Instructions
  You will receive a set of tools with descriptions.You are supposed to use only the tools mentioned below.
  ## Tools Information
  - Tools are structured in a Python dictionary with three keys:
    - `tool_name`: Name of the tool.
    - `tool_description`: Description of the tool.
    - `arguments`: List of dictionaries with three keys each:
      - `name`: Argument name.
      - `description`: Argument description.
      - `type`: Argument data type.

  ## Clarification
  - Examples are provided for understanding the task,Do not generate (query,output) pair which is already present in example
  - Use only the tools listed; do not use tools from the examples if not present in the tool list.
  - Combining all tools is recommended but not mandatory if they cannot be effectively combined.

  ## Output Format
  The output must be a RFC8259 compliant JSON object with two keys: 'query' and 'output'. It should highlight the importance of adhering to this structure.Do not output anything other than json code
  ## Tool List
  {tools}

  it is VERY IMPORTANT that the tools mentioned above are only used for generation of (query,output) pairs.
  it is a must that all arguments of used tools are used.

  To reference the value of the ith tool in the chain, use $$PREV[i] as argument value.$$PREV[i] cannot be called before calling the ith tool.
  For example,  $$PREV[0] cannot be called along the first tool.
  ##WRONG AND FLAWED Example
  {flaw}
  This example is flawed as $$PREV[0] is called along the first example

  Now generate a (query,output) pair"""
  return prompt

query=[]
indices=[]
for i in range(300):
  x=random.sample(range(0,len(tools_list)),7)
  a=get_prompt(tools_list,x)
  t=get_completion(a)
  query.append(t)
  indices.append(x)

data=pd.DataFrame()
data['query']=query
data['tools']=indices

data.to_csv('data.csv')

len(query)

df=pd.read_csv('/content/data.csv')

df=df.drop('Unnamed: 0',1)

a=list(df['query'])
b=list(df['tools'])

deletions=[]
for i in range(len(a)):
  print(i)
  _,_,a[i]=a[i].partition('{')
  a[i]='{'+a[i]
  a[i]=a[i].replace('\n','')
  a[i]=a[i].replace("  ","")
  if(a[i]=='{'):
    deletions.append(i)

for index in sorted(deletions, reverse=True):
    del a[index],b[index]

for i in range(0,len(a)):
  print(i)
  a[i]=json.loads(str(a[i]))

query_data=[]
output_data=[]
for i in a:
  query_data.append(i['query'])
  output_data.append(i['output'])

df=pd.DataFrame()

df['query']=query_data

df['output']=output_data

df['tools']=b

df.to_csv('cleaned_data.csv')

